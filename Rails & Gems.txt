[Rails] Validate that a user checked a box in a form	validates :terms_of_services, acceptance: true	http://guides.rubyonrails.org/active_record_validations.html#acceptance	activerecord rails validations
[Rails] Validate that if a model has associated models, validate them too.	<div>has_many :books &nbsp;</div><div>validates_associated :books</div>	http://guides.rubyonrails.org/active_record_validations.html#validates-associated	activerecord rails validations
[Rails] Validate that two fields have the same content	<div>validates :email, confirmation: true</div><div>validates :email_confirmation, presence: true</div><div>&lt;%= text_field :person, :email %&gt;</div><div>&lt;%= text_field :person, :email_confirmation %&gt;</div>	http://guides.rubyonrails.org/active_record_validations.html#confirmation	activerecord rails validations
[Rails] Validate that attributes' values are not included	"<div>class Account &lt; ActiveRecord::Base</div><div>&nbsp; validates :subdomain, exclusion: { in: %w(www us ca jp),</div><div>&nbsp; &nbsp; message: ""%{value} is reserved."" }</div><div>end</div>"	http://guides.rubyonrails.org/active_record_validations.html#exclusion	activerecord rails validations
[Rails] Validate attributes with Regex	"<div>class Product &lt; ActiveRecord::Base</div><div>&nbsp; validates :legacy_code, format: { with: /\A[a-zA-Z]+\z/,</div><div>&nbsp; &nbsp; message: ""only allows letters"" }</div><div>end</div>"	http://guides.rubyonrails.org/active_record_validations.html#format	activerecord rails validations
[Rails] Validate inclusion of attributes in a given&nbsp;set	"<div>class Coffee &lt; ActiveRecord::Base</div><div>&nbsp; validates :size, inclusion: { in: %w(small medium large),</div><div>&nbsp; &nbsp; message: ""%{value} is not a valid size"" }</div><div>end</div>"	http://guides.rubyonrails.org/active_record_validations.html#inclusion	activerecord rails validations
[Rails] Validate length	<div>validates :name, length: { minimum: 2 }</div><div>validates :bio, length: { maximum: 500 }</div><div>validates :password, length: { in: 6..20 }</div><div>validates :registration_number, length: { is: 6 }</div>	http://guides.rubyonrails.org/active_record_validations.html#length	activerecord rails validations
[Rails] Validate numerical values	<div>validates :points, numericality: true</div><div>validates :games_played, numericality: { only_integer: true }</div><div>&nbsp; :greater_than</div><div>&nbsp; :greater_than_or_equal_to</div><div>&nbsp; :equal_to</div><div>&nbsp; :less_than</div><div>&nbsp; :less_than_or_equal_to</div><div>&nbsp; :odd</div><div>&nbsp; :even</div>	http://guides.rubyonrails.org/active_record_validations.html#numericality	activerecord rails validations
[Rails] Validate presence of attribute	validates :name, :login, :email, presence: true	http://guides.rubyonrails.org/active_record_validations.html#presence	activerecord rails validations
[Rails] Validate absence	validates :name, :login, :email, absence: true<div><br /></div><div><sub>This helper validates that the specified attributes are absent. It uses the present? method to check if the value is not either nil or a blank string, that is, a string that is either empty or consists of whitespace.</sub></div>		activerecord rails validations
[Rails] Validate that an attribute is unique	"validates :email, uniqueness: true<div><br /></div><div><div>validates :name, uniqueness: { scope: :year,</div><div>&nbsp; &nbsp; message: ""should happen once per year"" }</div></div><div><br /></div><div>validates :name, uniqueness: { case_sensitive: false }</div>"	http://guides.rubyonrails.org/active_record_validations.html#uniqueness	activerecord rails validations
[Rails] Use custom validators	"<div>class GoodnessValidator &lt; ActiveModel::Validator</div><div>&nbsp; def validate(record)</div><div>&nbsp; &nbsp; if record.first_name == ""Evil""</div><div>&nbsp; &nbsp; &nbsp; record.errors[:base] &lt;&lt; ""This person is evil""</div><div>&nbsp; &nbsp; end</div><div>&nbsp; end</div><div>end</div><div>&nbsp;</div><div>class Person &lt; ActiveRecord::Base</div><div>&nbsp; validates_with GoodnessValidator</div><div>end</div>"	http://guides.rubyonrails.org/active_record_validations.html#validates-with	activerecord rails validations
[Rails] Validate against a block	This helper validates attributes against a block. It doesn't have a predefined validation function. You should create one using a block, and every attribute passed to validates_each will be tested against it. In the following example, we don't want names and surnames to begin with lower case.<div><br /></div><div><div>class Person &lt; ActiveRecord::Base</div><div>&nbsp; validates_each :name, :surname do |record, attr, value|</div><div>&nbsp; &nbsp; record.errors.add(attr, 'must start with upper case') if value =~ /\A[[:lower:]]/</div><div>&nbsp; end</div><div>end</div></div>	http://guides.rubyonrails.org/active_record_validations.html#validates-each	activerecord rails validations
[Rails] Validate to allow nil	"<div>class Coffee &lt; ActiveRecord::Base</div><div>&nbsp; validates :size, inclusion: { in: %w(small medium large),</div><div>&nbsp; &nbsp; message: ""%{value} is not a valid size"" },<b> allow_nil: true</b></div><div>end</div>"	http://guides.rubyonrails.org/active_record_validations.html#allow-nil	activerecord rails validations
[Rails] Validation to allow an attribute to be blank	<div>class Topic &lt; ActiveRecord::Base</div><div>&nbsp; validates :title, length: { is: 5 }, <b>allow_blank: true</b></div><div>end</div>	http://guides.rubyonrails.org/active_record_validations.html#allow-blank	activerecord rails validations
[Rails] Validation to specify on which action it should take place	validates :age, numericality: true, on: :update<div>validates :email, uniqueness: true, on: :create</div>	http://guides.rubyonrails.org/active_record_validations.html#on	activerecord rails validations
[Rails] Change tables	<div>change_table :products do |t|</div><div>&nbsp; t.remove :description, :name</div><div>&nbsp; t.string :part_number</div><div>&nbsp; t.index :part_number</div><div>&nbsp; t.rename :upccode, :upc_code</div><div>end</div>	http://guides.rubyonrails.org/active_record_migrations.html#changing-tables	activerecord migrations rails